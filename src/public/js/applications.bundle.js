/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/applications.js":
/*!********************************!*\
  !*** ./src/js/applications.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _services_applications_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../services/applications.service.js */ \"./src/services/applications.service.js\");\n\n\n// State management\nlet currentApplications = [];\nconst ITEMS_PER_PAGE = 10;\nlet currentPage = 1;\nlet refreshInterval;\n\n\n    // Main functions\n    async function loadApplications() {\n        try {\n            showLoadingStates();\n            const applications = await _services_applications_service_js__WEBPACK_IMPORTED_MODULE_0__.applicationsService.getAllApplications();\n            currentApplications = applications;\n            \n            if (!applications || applications.length === 0) {\n                //showEmptyState();\n                return;\n            }\n            \n            updateStatistics(applications);\n            updateApplicationsTable(applications);\n            updatePaginationInfo(applications.length);\n            \n        } catch (error) {\n            console.error('Error loading applications:', error);\n            showError('Failed to load applications');\n        }\n    }\n\n    function setupEventListeners() {\n\n        setTimeout(setupSearch, 3000);\n        setTimeout(setupStatusFilter, 3000);\n        setTimeout(setupApplicationForm, 3000);\n    }\n\n    function startAutoRefresh(interval) {\n        stopAutoRefresh();\n        refreshInterval = setInterval(loadApplications, interval);\n    }\n\n    function stopAutoRefresh() {\n        if (refreshInterval) {\n            clearInterval(refreshInterval);\n        }\n    }\n\n    // UI Update functions\n    function showLoadingStates() {\n        document.querySelectorAll('.stats-card h2').forEach(el => {\n            el.innerHTML = '<div class=\"spinner-border spinner-border-sm\"></div>';\n        });\n        //not sure what this intented to do\n        // document.querySelector('#applicationsTableBody').innerHTML = createLoadingRow(7);\n    }\n\n    function showEmptyState() {\n        const tableBody = document.querySelector('#applicationsTableBody');\n        tableBody.innerHTML = `\n            <tr>\n                <td colspan=\"7\" class=\"text-center py-5\">\n                    <div class=\"empty-state\">\n                        <i class=\"bi bi-inbox fs-1 text-muted\"></i>\n                        <h5 class=\"mt-3\">No Applications Found</h5>\n                        <p class=\"text-muted\">Start tracking your job applications by clicking the \"Add Application\" button.</p>\n                    </div>\n                </td>\n            </tr>\n        `;\n    }\n\n    function updateStatistics(applications) {\n    \n        const stats = calculateStats(applications);\n\n        updateStatsDisplay(stats);\n    }\n\n    function calculateStats(applications) {\n        return {\n            total: applications.length,\n            pending: applications.filter(app => app.status === 'Pending').length,\n            applied: applications.filter(app => app.status === 'Applied').length,\n            interviewing: applications.filter(app => app.status === 'Interviewing').length,\n            offered: applications.filter(app => app.status === 'Offered').length,\n            rejected: applications.filter(app => app.status === 'Rejected').length\n        };\n    }\n\n    function updateStatsDisplay(stats) {\n        document.getElementById('totalApplications').textContent = stats.total;\n        // document.getElementById('pendingApplications').textContent = stats.pending;\n        // document.getElementById('activeApplications').textContent = stats.applied + stats.interviewing;\n        // document.getElementById('successfulApplications').textContent = stats.offered;\n    }\n\n    function updateApplicationsTable(applications) {\n        const tableBody = document.querySelector('#applicationsTableBody');\n        \n        const paginatedApps = paginateApplications(applications);\n        \n        if (paginatedApps.length === 0) {\n            tableBody.innerHTML = createEmptyRow();\n            return;\n        }\n        \n        tableBody.innerHTML = paginatedApps.map(createApplicationRow).join('');\n        updatePaginationInfo(applications.length);\n    }\n\n    function createApplicationRow(application) {\n        const statusClass = getStatusClass(application.status);\n        const formattedDate = new Date(application.appliedDate).toLocaleDateString();\n        \n        return `\n            <tr>\n                <td>\n                    <div class=\"d-flex align-items-center\">\n                        <div>\n                            <h6 class=\"mb-0\">${application.company}</h6>\n                            <small class=\"text-muted\">${application.position}</small>\n                        </div>\n                    </div>\n                </td>\n                <td>\n                    <span class=\"badge ${statusClass}\">${application.status}</span>\n                </td>\n                <td>${application.source || 'N/A'}</td>\n                <td>${formattedDate}</td>\n                <td>${application.nextStep || 'No next step'}</td>\n                <td>\n                    <div class=\"btn-group\">\n                        <button class=\"btn btn-sm btn-outline-primary\" \n                                onclick=\"editApplication('${application._id}')\">\n                            <i class=\"bi bi-pencil\"></i>\n                        </button>\n                        <button class=\"btn btn-sm btn-outline-danger\" \n                                onclick=\"deleteApplication('${application._id}')\">\n                            <i class=\"bi bi-trash\"></i>\n                        </button>\n                    </div>\n                </td>\n            </tr>\n        `;\n    }\n\n    function createEmptyRow() {\n        return `\n            <tr>\n                <td colspan=\"6\" class=\"text-center py-4\">\n                    <div class=\"empty-state\">\n                        <i class=\"bi bi-inbox fs-1 text-muted\"></i>\n                        <p class=\"mt-2 mb-0\">No applications found</p>\n                    </div>\n                </td>\n            </tr>\n        `;\n    }\n\n    function getStatusClass(status) {\n        const statusClasses = {\n            'Pending': 'bg-warning text-dark',\n            'Applied': 'bg-info text-white',\n            'Interviewing': 'bg-primary text-white',\n            'Offered': 'bg-success text-white',\n            'Rejected': 'bg-danger text-white',\n            'Withdrawn': 'bg-secondary text-white'\n        };\n        \n        return statusClasses[status] || 'bg-secondary text-white';\n    }\n\n    // Add these helper functions for edit and delete operations\n    async function editApplication(id) {\n        try {\n            const application = await _services_applications_service_js__WEBPACK_IMPORTED_MODULE_0__.applicationsService.getApplicationById(id);\n            // Populate form with application data\n            const form = document.getElementById('applicationForm');\n            form.elements.company.value = application.company;\n            form.elements.position.value = application.position;\n            form.elements.status.value = application.status;\n            form.elements.source.value = application.source;\n            form.elements.appliedDate.value = new Date(application.appliedDate).toISOString().split('T')[0];\n            form.elements.notes.value = application.notes;\n            \n            // Store application ID for update\n            form.dataset.applicationId = id;\n            \n            // Show modal\n            new bootstrap.Modal(document.getElementById('applicationDetailsModal')).show();\n        } catch (error) {\n            console.error('Error loading application:', error);\n            showError('Failed to load application details');\n        }\n    }\n\n    async function deleteApplication(id) {\n        if (!confirm('Are you sure you want to delete this application?')) {\n            return;\n        }\n        \n        try {\n            await _services_applications_service_js__WEBPACK_IMPORTED_MODULE_0__.applicationsService.deleteApplication(id);\n            await loadApplications();\n            showNotification('Application deleted successfully');\n        } catch (error) {\n            console.error('Error deleting application:', error);\n            showError('Failed to delete application');\n        }\n    }\n\n    function paginateApplications(applications) {\n        const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;\n        return applications.slice(startIndex, startIndex + ITEMS_PER_PAGE);\n    }\n\n    function updatePaginationInfo(totalApplications) {\n        const startIndex = (currentPage - 1) * ITEMS_PER_PAGE + 1;\n        const endIndex = Math.min(currentPage * ITEMS_PER_PAGE, totalApplications);\n        \n        document.getElementById('showingStart').textContent = totalApplications ? startIndex : 0;\n        document.getElementById('showingEnd').textContent = endIndex;\n        document.getElementById('totalEntries').textContent = totalApplications;\n    \n        // Update pagination buttons\n        const paginationElement = document.getElementById('applicationsPagination');\n        const totalPages = Math.ceil(totalApplications / ITEMS_PER_PAGE);\n        \n        let paginationHTML = `\n            <li class=\"page-item ${currentPage === 1 ? 'disabled' : ''}\">\n                <a class=\"page-link\" href=\"#\" data-page=\"${currentPage - 1}\">Previous</a>\n            </li>\n        `;\n    \n\n        for (let i = 1; i <= totalPages; i++) {\n            paginationHTML += `\n                <li class=\"page-item ${i === currentPage ? 'active' : ''}\">\n                    <a class=\"page-link\" href=\"#\" data-page=\"${i}\">${i}</a>\n                </li>\n            `;\n        }\n\n        paginationHTML += `\n            <li class=\"page-item ${currentPage === totalPages ? 'disabled' : ''}\">\n                <a class=\"page-link\" href=\"#\" data-page=\"${currentPage + 1}\">Next</a>\n            </li>\n        `;\n        paginationHTML += `\n        <li class=\"page-item ${currentPage === totalPages ? 'disabled' : ''}\">\n            <a class=\"page-link\" href=\"#\" data-page=\"${currentPage + 1}\">Next</a>\n        </li>\n        `;\n\n        paginationElement.innerHTML = paginationHTML;\n\n        // Add click handlers to pagination buttons\n        paginationElement.querySelectorAll('.page-link').forEach(link => {\n            link.addEventListener('click', (e) => {\n                e.preventDefault();\n                const newPage = parseInt(e.target.dataset.page);\n                if (newPage && newPage !== currentPage) {\n                    currentPage = newPage;\n                    updateApplicationsTable(currentApplications);\n                }\n            });\n        });\n    }\n\n    // Event Listeners\n    function setupSearch() {\n       \n        console.log('will setup search');\n\n        function updateApplicationsTable(filteredApplications) {\n            //This needs to be defined\n        };\n\n        \n        function performUpdates() {\n            setTimeout(() => {\n                const searchTerm = searchInput.value.toLowerCase();\n                const filtered = filterApplications(searchTerm);\n                updateApplicationsTable(filtered);\n                updatePaginationInfo(filtered.length);\n            }, 300);\n        }\n\n        const searchInput = document.getElementById('applicationSearch');\n        searchInput.addEventListener('input', performUpdates);\n    }\n\n    function filterApplications(term) {\n        if (!term) return currentApplications;\n        \n        return currentApplications.filter(app => \n            app.company.toLowerCase().includes(term) ||\n            app.position.toLowerCase().includes(term) ||\n            app.status.toLowerCase().includes(term)\n        );\n    }\n\n    function setupStatusFilter() {\n        console.log('will set up status filter');\n\n        document.querySelector('.dropdown-menu').addEventListener('click', (e) => {\n            if (e.target.matches('[data-filter]')) {\n                e.preventDefault();\n                const filter = e.target.dataset.filter;\n                const filtered = filterByStatus(filter);\n                updateApplicationsTable(filtered);\n                updatePagination(filtered.length);\n            }\n        });\n    }\n\n    function filterByStatus(status) {\n        if (status === 'all') return currentApplications;\n        \n        return currentApplications.filter(app => \n            app.status.toLowerCase() === status.toLowerCase()\n        );\n    }\n\n    function setupApplicationForm() {\n        console.log('will set up application form');\n        \n        const saveButton = document.getElementById('saveApplication');\n        if (!saveButton) return;\n\n        saveButton.addEventListener('click', handleApplicationSubmit);\n    }\n\n    async function handleApplicationSubmit(e) {\n        e.preventDefault();\n        \n        const form = document.getElementById('applicationForm');\n        const formData = new FormData(form);\n        \n        try {\n            const applicationData = {\n                company: formData.get('company'),\n                position: formData.get('position'),\n                status: formData.get('status'),\n                source: formData.get('source'),\n                appliedDate: formData.get('appliedDate'),\n                notes: formData.get('notes')\n            };\n            if (!applicationData.company) {\n                \n                const error = document.getElementById('application-company-required');\n                error.setAttribute('class', 'application-required-error');\n            } else if (!applicationData.position) {\n               const error = document.getElementById('application-position-required');\n               error.setAttribute('class', 'application-required-error');\n            } else if (!applicationData.source) {\n                const error = document.getElementById('application-source-required');\n                error.setAttribute('class', 'application-required-error');\n                \n            } else {\n                \n                // const errors = document.getElementsByClassName('application-required-error');\n              \n                // errors.forEach((e) => {\n                    \n                // });\n\n                const response = await _services_applications_service_js__WEBPACK_IMPORTED_MODULE_0__.applicationsService.createApplication(applicationData);\n                \n                // Close modal\n                const modal = bootstrap.Modal.getInstance(document.getElementById('applicationDetailsModal'));\n                modal.hide();\n                \n                // Refresh applications list\n                await loadApplications();\n                \n                showNotification('Application added successfully');\n                form.reset();\n            }\n            \n        } catch (error) {\n            console.error('Error submitting application:', error);\n            showError('Failed to add application');\n        }\n    }\n    \n    // Helper functions\n    function showNotification(message, type = 'success') {\n        const toast = document.getElementById('notification-toast');\n        const toastBody = toast.querySelector('.toast-body');\n        toast.className = `toast bg-${type} text-white`;\n        toastBody.textContent = message;\n        new bootstrap.Toast(toast).show();\n    }\n\n    function showError(message) {\n        showNotification(message, 'danger');\n    }\n\n    loadApplications();\n    setupEventListeners();\n    // startAutoRefresh(30000); // Refresh every 30 seconds\n\n\n//# sourceURL=webpack://qravity/./src/js/applications.js?");

/***/ }),

/***/ "./src/services/api.service.js":
/*!*************************************!*\
  !*** ./src/services/api.service.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiService: () => (/* binding */ apiService)\n/* harmony export */ });\nconst API_URL = \"MISSING_ENV_VAR\".API_BASE_URL || '/api';\n\nclass ApiService {\n  constructor() {\n    this.baseUrl = API_URL;\n  }\n\n  async getHeaders() {\n    const token = localStorage.getItem('token');\n    return {\n      'Content-Type': 'application/json',\n      ...(token && { Authorization: `Bearer ${token}` }),\n    };\n  }\n\n  async get(endpoint) {\n    const response = await fetch(`${this.baseUrl}/${endpoint}`, {\n      headers: await this.getHeaders(),\n    });\n    if (!response.ok) throw new Error('API request failed');\n    return response.json();\n  }\n\n  async post(endpoint, data) {\n    const response = await fetch(`${this.baseUrl}/${endpoint}`, {\n      method: 'POST',\n      headers: await this.getHeaders(),\n      body: JSON.stringify(data),\n    });\n    if (!response.ok) throw new Error('API request failed');\n    return response.json();\n  }\n\n  async put(endpoint, data) {\n    const response = await fetch(`${this.baseUrl}/${endpoint}`, {\n      method: 'PUT',\n      headers: await this.getHeaders(),\n      body: JSON.stringify(data),\n    });\n    if (!response.ok) throw new Error('API request failed');\n    return response.json();\n  }\n\n  async delete(endpoint) {\n    const response = await fetch(`${this.baseUrl}/${endpoint}`, {\n      method: 'DELETE',\n      headers: await this.getHeaders(),\n    });\n    if (!response.ok) throw new Error('API request failed');\n    return response.json();\n  }\n}\n\nconst apiService = new ApiService();\n\n\n//# sourceURL=webpack://qravity/./src/services/api.service.js?");

/***/ }),

/***/ "./src/services/applications.service.js":
/*!**********************************************!*\
  !*** ./src/services/applications.service.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applicationsService: () => (/* binding */ applicationsService)\n/* harmony export */ });\n/* harmony import */ var _api_service_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.service.js */ \"./src/services/api.service.js\");\n\n\nconst applicationsService = {\n  async getAllApplications() {\n    try {\n      return await _api_service_js__WEBPACK_IMPORTED_MODULE_0__.apiService.get('applications');\n    } catch (error) {\n      console.error('Error fetching applications:', error);\n      throw error;\n    }\n  },\n\n  async getApplicationById(id) {\n    try {\n      return await _api_service_js__WEBPACK_IMPORTED_MODULE_0__.apiService.get(`applications/${id}`);\n    } catch (error) {\n      console.error('Error fetching application:', error);\n      throw error;\n    }\n  },\n\n  async updateApplication(id, data) {\n    try {\n      return await _api_service_js__WEBPACK_IMPORTED_MODULE_0__.apiService.put(`applications/${id}`, data);\n    } catch (error) {\n      console.error('Error updating application:', error);\n      throw error;\n    }\n  },\n\n  async deleteApplication(id) {\n    try {\n      return await _api_service_js__WEBPACK_IMPORTED_MODULE_0__.apiService.delete(`applications/${id}`);\n    } catch (error) {\n      console.error('Error deleting application:', error);\n      throw error;\n    }\n  },\n\n  async createApplication(data) {\n    try {\n      return await _api_service_js__WEBPACK_IMPORTED_MODULE_0__.apiService.post('applications', data);\n    } catch (error) {\n      console.error('Error creating application:', error);\n      throw error;\n    }\n  }\n}; \n\n//# sourceURL=webpack://qravity/./src/services/applications.service.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/applications.js");
/******/ 	
/******/ })()
;